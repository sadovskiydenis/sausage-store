cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - release
  - deploy
  - notify
  - test
include:
  - template: Security/SAST.gitlab-ci.yml
#stage: build
build-backend-code-job:
  stage: build
  cache:
    paths:
    - ${CI_PROJECT_DIR}/.m2/repository
  only:
    changes:
    - backend/*
  script:
    - cd backend
##    - mvn package
    - mvn -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository package -Dversion.application=${VERSION}
    - echo "VAR_JOB_ID=${CI_JOB_ID}" >> /builds/std-024-40/sausage-store/build.env
  artifacts:
    reports:
      dotenv: build.env
    paths:
    - backend/target/sausage-store-${VERSION}.jar
#stage: test
spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  script:
    - ls -l /builds/std-024-40/sausage-store/backend/
  needs:
    - build-backend-code-job
sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  variables:
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  cache:
    key: "${CI_JOB_NAME}"
    paths:
    - .sonar/cache
  script:
    - cd backend
    - mvn -X verify sonar:sonar -Dsonar.qualitygate.wait=true -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dsonar.projectKey=${SONAR_PROJECT_KEY_B} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN_B}
  needs:
    - build-backend-code-job
# stage: release
upload-backend-release:
  stage: release
  only:
    changes:
      - backend/*
  needs:
    - build-backend-code-job
  script:
    - cd backend
    - mvn deploy -DskipTests -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml -Dversion.application=${VERSION}
# stage: deploy
deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
     #выполняем простую команду для проверки
    - ssh ${DEV_USER}@${DEV_HOST} #"id"
# скачиваем ранее собранный артефакт с Nexus. При этом необходимо заранее
  # прописать креды от Nexus в переменные в настройке пайплайна
    - curl -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} -o sausage-store-${VERSION}.jar ${NEXUS_REPO_URL}/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
 # запускаем бэкенд  
    - java -jar sausage-store-${VERSION}.jar & 
#stage: notify
#telegram-notification-backend:
#  variables:
#    CI_JOB_NAME: build-backend-code-job
#    CHAT_ID: "-1002134018008"
#    URL_TELEGRAM_BOT: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
#  stage: notify
#  only:
#    changes:
#    - backend/*
#  only:
#    variables:
#    - $CI_COMMIT_MESSAGE =~ /send notification/
#  script:
###    - echo "${VAR_JOB_ID}"
#    - 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"$CHAT_ID\", \"text\": \"Садовский Денис собрал backend. Ссылка на артефакт: $CI_PROJECT_URL/-/jobs/$VAR_JOB_ID/artifacts/download?job=$CI_JOB_NAME\"}" $URL_TELEGRAM_BOT '
###    - sh ci-notify.sh
#  needs:
#    - build-backend-code-job
