cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  - release
  - deploy
  - notify
build-frontend-code-job:   # задача с именем build-code-job
  stage: build   # этап build
  only:   # запуск этого шага только при изменениях в директориях backend и frontend
    changes:
    - frontend/*
  script:   # объявление скрипта
    - cd frontend
    - npm install   # загрузка всех сторонних зависимостей
    - npm run build   # запуск сборки кода
    - echo "BUILD_JOB_VAR=${CI_JOB_ID}" >> /builds/std-024-40/sausage-store/build.env    #с этой фигней долго мучался, по каокой-то непонятной причине срабатывает только полный путь до файла
  artifacts:   # блок, отвечающий за сохранение файлов как артефактов в Gitlab
    reports:
      dotenv: build.env
    paths:
    - frontend/dist/frontend
upload-frontend-release:
  stage: release
  only:
    changes:
    - frontend/*
  needs:
    - build-frontend-code-job
  script:
    - cd frontend/dist/
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/${NEXUS_REPO_FRONTEND_NAME}/sausage-store-${VERSION}.tar.gz
sonarqube-frontend-sast:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  cache:
    key: "${CI_JOB_NAME}"
    paths:
    - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -X -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${SONAR_PROJECT_KEY_F} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN_F}
  needs:
  - build-frontend-code-job
deploy:
  stage: deploy
  environment:
    name: frontend/$CI_COMMIT_REF_SLUG
    url: http://std-024-40.praktikum-services.tech/
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
     #выполняем простую команду для проверки
    - scp ./frontend/frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/frontend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./frontend/deploy.sh
telegram-notification-frontend:
  variables:
    CI_JOB_NAME: build-frontend-code-job
    CHAT_ID: "-1002134018008"
    URL_TELEGRAM_BOT: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  stage: notify
  only:
    changes:
    - frontend/*
  only:
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - 'curl -X POST -H "Content-Type: application/json" -d "{\"chat_id\": \"$CHAT_ID\", \"text\": \"Садовский Денис собрал frontend. Ссылка на артефакт: $CI_PROJECT_URL/-/jobs/$BUILD_JOB_VAR/artifacts/download?job=$CI_JOB_NAME\"}" $URL_TELEGRAM_BOT '
  needs:
    - build-frontend-code-job
